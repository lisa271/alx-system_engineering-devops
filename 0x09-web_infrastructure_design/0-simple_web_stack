https://docs.google.com/document/d/1yOd-_w7I7Jwknb1V5OMNKxzk3oDA9C3ZQV7Zq08FOGs/edit?usp=sharing

A server is a computer system that is used to provide a service or resource to other computers or devices on a network.

A domain name is used to identify a website on the internet.

The www in www.foobar.com is a subdomain of the domain name foobar.com. The DNS record type that is used to associate the www subdomain with the IP address of the server is called a CNAME record. A CNAME record maps the subdomain to the canonical domain name of the server, which in this case is foobar.com.

The web server is responsible for receiving requests from clients (such as web browsers) and serving web content in response.

The application server is responsible for executing the business logic and generating dynamic content for the website. 

The database is responsible for storing and managing the data that is used by the application server. 

The server communicates with the client's computer over the internet using the HTTP (Hypertext Transfer Protocol) protocol. When a client sends a request to the server, it includes a URL (Uniform Resource Locator) that identifies the resource that it is requesting, such as a particular web page or image. The server responds to the request with an HTTP response that includes the requested resource, which is sent back to the client's browser.

The first issue is that it is a single point of failure (SPOF). If our server goes down for any reason, our website will be unavailable. To mitigate this risk, we could use redundancy and failover mechanisms, such as having a backup server ready to take over in case the primary server fails.

The second issue is downtime during maintenance. When we need to deploy new code or make other changes to our web server, we will need to restart it. During that time, our website will be unavailable. We can mitigate this risk by implementing rolling deployments, where we gradually deploy changes to minimize the amount of downtime.

The third issue is scalability. If we have too much incoming traffic, our single server may not be able to handle it all. To address this, we could use load balancing and horizontal scaling techniques to distribute traffic across multiple servers.
